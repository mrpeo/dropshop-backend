# app/main.py
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from fastapi import Request, status
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException

from app.api.v1.api import api_router
from app.core.config import settings
from app.db.session import engine
from app.db import base

from fastapi.staticfiles import StaticFiles

# Import t·∫•t c·∫£ models ƒë·ªÉ Alembic c√≥ th·ªÉ detect
# ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o r·∫±ng t·∫•t c·∫£ models ƒë∆∞·ª£c ƒëƒÉng k√Ω v·ªõi SQLAlchemy
from app.models import user  # Import c√°c models kh√°c khi c√≥: shop, product, etc.

def create_application() -> FastAPI:
    """
    T·∫°o v√† c·∫•u h√¨nh ·ª©ng d·ª•ng FastAPI
    """
    app = FastAPI(
        title=settings.PROJECT_NAME,
        version=settings.VERSION,
        description=settings.DESCRIPTION,
        openapi_url=f"{settings.API_V1_STR}/openapi.json",
        docs_url=f"{settings.API_V1_STR}/docs",
        redoc_url=f"{settings.API_V1_STR}/redoc",
    )

    # C·∫•u h√¨nh CORS
    setup_cors(app)
    
    # C·∫•u h√¨nh middleware b·∫£o m·∫≠t
    setup_middleware(app)
    
    # ƒêƒÉng k√Ω c√°c routes
    setup_routers(app)
    
    # C·∫•u h√¨nh exception handlers
    setup_exception_handlers(app)

    # Serve static files
    app.mount("/static", StaticFiles(directory="app/static"), name="static")
    
    return app

def setup_cors(app: FastAPI) -> None:
    """
    C·∫•u h√¨nh CORS middleware
    """
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.BACKEND_CORS_ORIGINS,
        allow_credentials=True,
        allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
        allow_headers=[
            "Accept",
            "Accept-Language",
            "Content-Language",
            "Content-Type",
            "Authorization",
            "X-Requested-With",
            "X-Request-ID",
        ],
    )

def setup_middleware(app: FastAPI) -> None:
    """
    C·∫•u h√¨nh c√°c middleware b·∫£o m·∫≠t
    """
    # Trusted Host Middleware - b·∫£o v·ªá kh·ªèi Host header attacks
    if settings.ALLOWED_HOSTS:
        app.add_middleware(
            TrustedHostMiddleware, 
            allowed_hosts=settings.ALLOWED_HOSTS
        )

def setup_routers(app: FastAPI) -> None:
    """
    ƒêƒÉng k√Ω c√°c API routes
    """
    # ƒêƒÉng k√Ω API v1
    app.include_router(api_router, prefix=settings.API_V1_STR)
    
    # Health check endpoint
    @app.get("/health")
    async def health_check():
        """
        Endpoint ki·ªÉm tra s·ª©c kh·ªèe c·ªßa service
        """
        return {
            "status": "healthy",
            "service": settings.PROJECT_NAME,
            "version": settings.VERSION
        }
    
    # Root endpoint
    @app.get("/")
    async def root():
        """
        Root endpoint - th√¥ng tin c∆° b·∫£n v·ªÅ API
        """
        return {
            "message": f"Welcome to {settings.PROJECT_NAME}",
            "version": settings.VERSION,
            "docs": f"{settings.API_V1_STR}/docs",
            "redoc": f"{settings.API_V1_STR}/redoc"
        }

def setup_exception_handlers(app: FastAPI) -> None:
    """
    C·∫•u h√¨nh c√°c exception handlers t√πy ch·ªânh
    """
    
    @app.exception_handler(StarletteHTTPException)
    async def http_exception_handler(request: Request, exc: StarletteHTTPException):
        """
        Handler cho HTTP exceptions
        """
        return JSONResponse(
            status_code=exc.status_code,
            content={
                "error": True,
                "message": exc.detail,
                "status_code": exc.status_code,
                "path": request.url.path
            }
        )
    
    @app.exception_handler(RequestValidationError)
    async def validation_exception_handler(request: Request, exc: RequestValidationError):
        """
        Handler cho validation errors
        """
        errors = []
        for error in exc.errors():
            errors.append({
                "field": " -> ".join(str(x) for x in error["loc"]),
                "message": error["msg"],
                "type": error["type"]
            })
        
        return JSONResponse(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            content={
                "error": True,
                "message": "Validation error",
                "status_code": 422,
                "path": request.url.path,
                "details": errors
            }
        )
    
    @app.exception_handler(Exception)
    async def general_exception_handler(request: Request, exc: Exception):
        """
        Handler cho c√°c exception chung (500 Internal Server Error)
        """
        # Trong production, b·∫°n n√™n log l·ªói chi ti·∫øt nh∆∞ng kh√¥ng tr·∫£ v·ªÅ cho client
        # import logging
        # logging.error(f"Unhandled exception: {exc}", exc_info=True)
        
        return JSONResponse(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            content={
                "error": True,
                "message": "Internal server error",
                "status_code": 500,
                "path": request.url.path
            }
        )

# T·∫°o ·ª©ng d·ª•ng FastAPI
app = create_application()

# Event handlers
@app.on_event("startup")
async def startup_event():
    """
    X·ª≠ l√Ω khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
    """
    print(f"üöÄ {settings.PROJECT_NAME} is starting up...")
    print(f"üìñ Documentation available at: {settings.API_V1_STR}/docs")
    print(f"üîó API base URL: {settings.API_V1_STR}")

@app.on_event("shutdown")
async def shutdown_event():
    """
    X·ª≠ l√Ω khi ·ª©ng d·ª•ng t·∫Øt
    """
    print(f"üõë {settings.PROJECT_NAME} is shutting down...")

# N·∫øu ch·∫°y tr·ª±c ti·∫øp file n√†y
if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "main:app",
        host=settings.SERVER_HOST,
        port=settings.SERVER_PORT,
        reload=settings.DEBUG,
        log_level="info" if not settings.DEBUG else "debug"
    )